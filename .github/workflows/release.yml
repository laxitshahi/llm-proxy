name: Releases
on:
  workflow_dispatch:
    branches:
      - main
    paths-ignore:
    # List any paths that should be ignored if changes have been made to them

jobs:
  changelog:
    if: github.repository == 'llm-proxy/llm-proxy'
    runs-on: ubuntu-latest

    steps:
      # check out the repository with all releases
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Create a temporary, uniquely named branch to push release info to
      - name: create temporary branch
        run: git branch "release-from-${{ github.sha }}" "${{ github.sha }}"

      # switch to the temporary branch
      - name: switch to new branch
        run: git checkout release-from-${{ github.sha }}

      # extract the version from pyproject.toml
      - name: get-poetry-version
        id: poetry-version
        run: |
          VERSION=$(toml get pyproject.toml tool.poetry.version)
          echo "current-version=$VERSION" >> "$GITHUB_OUTPUT"

      # Fetch pull request titles and append only new titles to release notes
      - name: Fetch Pull Request Titles
        id: pr-titles
        run: |
          gh pr list --json title -L 100 | jq -r '.[].title' > .github/pull_request_titles.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Compare with existing titles and append only new titles
      - name: Append New Pull Request Titles to Release Notes
        run: |
          comm -23 <(sort -u .github/pull_request_titles.txt) <(sort -u .github/existing_titles.txt) >> "$GITHUB_OUTPUT"
        continue-on-error: true # Allow this step to fail if no new pull request titles are found

      # Update the existing titles file with the new titles
      - name: Update Existing Titles
        run: |
          cat .github/pull_request_titles.txt >> .github/existing_titles.txt
        continue-on-error: true # Allow this step to fail if the existing titles file is not found

      # create PR using GitHub CLI
      - name: create PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: create-pr
        run: gh pr create --base main --head release-from-${{ github.sha }} --title 'Merge new release into main' --body 'Created by Github action'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # merge PR using GitHub CLI
      - name: merge PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: merge-pr
        run: gh pr merge --admin --merge --subject 'Merge release info' --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # release info is now in main so we can continue as before
      - name: create release with last commit
        if: steps.changelog.outputs.skipped == 'false'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.CHANGELOG_RELEASE }}
          tag: ${{ steps.changelog.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}